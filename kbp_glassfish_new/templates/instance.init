#!/bin/sh
### BEGIN INIT INFO
# Provides:          glassfish-instance-<%= name %>
# Required-Start:    $local_fs $remote_fs $network glassfish
# Required-Stop:     $local_fs $remote_fs $network glassfish
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GlassFish
# Description:       Starts GlassFish application server.
### END INIT INFO

# Not being root makes jps cry
if [ `/usr/bin/id -u` -ne 0 ]; then
»˙˙˙˙˙˙˙echo "Please be root" >&2
»˙˙˙˙˙˙˙exit 1
fi

DESC="GlassFish application server"
NAME=glassfish-instance-<%= name %>
NODE=
DOMAIN_PORT=4848
SCRIPTNAME=/etc/init.d/$NAME
JPS=/usr/bin/jps
LOGROOT=/var/log/glassfish

GLASSFISH_HOME=${GLASSFISH_HOME:-"/opt/glassfish"}
GLASSFISH_USER=${GLASSFISH_USER:-"glassfish"}
GLASSFISH_CMD=${GLASSFISH_CMD:-"$GLASSFISH_HOME/bin/asadmin"}
INSTANCE="<%= name %>"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
. /lib/lsb/init-functions

#
# Check if GlassFish is running
#
glassfishIsRunning()
{
	glassfish_is_running="false"
	glassfish_jps_log=`mktemp /var/tmp/glassfish-jps.log.XXXXXX`
	$JPS -m > "$glassfish_jps_log"

	if grep "\-instancedir $GLASSFISH_HOME/nodes/$NODE/$1" "$glassfish_jps_log" >/dev/null 2>&1 ; then
		glassfish_is_running="true"
	fi

	rm -f "$glassfish_jps_log"
	[ "$glassfish_is_running" = "true" ]
}

#
# Function that starts the daemon/service
#
do_start()
{
	if [ -f $GLASSFISH_HOME/nodes/$NODE/$INSTANCE/autostart ]; then
		echo -n "Starting Glassfish instance $1... "
		echo "\nstarting Glassfish instance $1 $(date)" >> $LOG
		echo "-----------------------------------------------" >> $LOG
		if glassfishIsRunning $1; then
			echo "already started" | tee -a $LOG
			return 1
		else
			/bin/su -c "$GLASSFISH_CMD --port $DOMAIN_PORT start-instance $1 &" $GLASSFISH_USER >> $LOG 2>&1
			sleep 20
			if glassfishIsRunning $1; then
				echo "OK" | tee -a $LOG
				return 0
			else
				echo "failed" | tee -a $LOG
				return 2
			fi
		fi
	else
		echo "No autostart file found in $GLASSFISH_HOME/nodes/$NODE/$INSTANCE... not starting"
		return 0
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	echo -n "Shutting down Glassfish instance $1..."
	echo "\nshutting down Glassfish instance $1 $(date)" >> $LOG
	echo "----------------------------------------------------" >> $LOG
	if glassfishIsRunning $1 ; then
		/bin/su -c "$GLASSFISH_CMD --port $DOMAIN_PORT stop-instance $1 &" $GLASSFISH_USER >> $LOG 2>&1
		# wait 60 sec for stop at maximum
		wait_sec=60
		while [ "$wait_sec" != "0" ] ; do
			sleep 1
			echo -n "."
			if ! glassfishIsRunning $1 ; then
				# Glassfish is stopped, end the loop
				wait_sec=0
				break
			fi
			wait_sec=$((wait_sec -1))
		done
		# check the final status
		if glassfishIsRunning $1 ; then
			# terminate with extreme prejudice
			echo "can't stop using asadmin, trying a big hammer..." | tee -a $LOG
			GLASSPID=/tmp/GlassFishMustDie.die.die
			ps ax > $GLASSPID
			PIDOFDEATH=$(grep "\-instancedir $GLASSFISH_HOME/nodes/$NODE/$1" $GLASSPID | awk '{print $1}')
			if [ "$PIDOFDEATH" != "" ]; then
				for pid in $PIDOFDEATH; do
					echo -n "terminating $pid with extreme prejudice..." | tee -a $LOG
					kill -9 $pid
				done
			fi
			rm -rf $GLASSPID
			# if he's still running after that, I give up...
			if glassfishIsRunning $1; then
				echo " failed" | tee -a $LOG
				return 2
			else
				echo " OK" | tee -a $LOG
				return 0
			fi
		else
			echo " OK" | tee -a $LOG
			return 0
		fi
	else
		echo " already stopped" | tee -a $LOG
		return 1
	fi
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	# (not implemented for GlassFish)
	return 0
}

usage() {
	echo "Usage: $SCRIPTNAME {start|stop|reload|restart|force-reload|status}" >&2
	exit 3
}

LOG=

case "$1" in
	start)
		LOG=$LOGROOT/$INSTANCE
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC $INSTANCE" "$NAME"
		do_start $INSTANCE
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0; exit 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1; exit 1 ;;
		esac
	;;

	stop)
		LOG=$LOGROOT/$INSTANCE
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC $INSTANCE" "$NAME"
		do_stop $INSTANCE
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0; exit 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1; exit 1 ;;
		esac
	;;

	restart|force-reload)
		LOG=$LOGROOT/$INSTANCE
		do_stop $INSTANCE
		case "$?" in
			0|1) do_start $INSTANCE
			case "$?" in
				0) log_end_msg 0 ;; # Ok!
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
			*)  # Failed to stop
				log_end_msg 1
			;;
		esac
	;;

	reload) do_reload ;;

	status)
		LOG=$LOGROOT/$INSTANCE
		echo -n "Glassfish instance $INSTANCE is "
		if glassfishIsRunning $INSTANCE; then
			echo "running"
			exit 0
		else
			echo "not running"
			exit 3
		fi
	;;

	*)
		usage
	;;
esac
